/* Definition section */
%{
    #include "common.h"
    #include "y.tab.h"	/* header file generated by bison */
    extern YYSTYPE yylval;
    extern void dump_symbol();
    extern  int level;
    extern int myIndex;
       typedef struct variable
    {
        int index;
        char* name;
        char* type;
        int address;
        int lineno;
        char* element_type;
        struct variable* next;
    }variable;
    int address;
    extern variable* sym_tb;
    #define YY_NO_UNPUT
    #define YY_NO_INPUT
%}



letter  [a-zA-Z_]
digit [0-9]
id {letter}+({letter}|{digit})*
inumber {digit}+
fnumber ({digit}*\.{digit}+)
newline		[\n]


%x CMT
%x STR
%option yylineno

/* Rules section */
%%

"/*"        { BEGIN(CMT); }
<CMT>"*/"   { BEGIN(INITIAL); }
<CMT>\n     {;}
<CMT>.      {;}
"//".*      {;}

"\""        { BEGIN(STR); }
<STR>([^\"]|"\\\"")*  { yylval.s_val = strdup(yytext); return STRING_LIT; }
<STR>"\""    {BEGIN(INITIAL);   }


    /*--------------------------------------------------------------------------------------------------------*/
    /*logical operators*/
"&&"         { return AND; }
"||"             { return OR; }
"!"             {return NOT; }
    /*logical operators*/
    /*--------------------------------------------------------------------------------------------------------*/
    /*--------------------------------------------------------------------------------------------------------*/
    /*assignments*/
"="     { return '=';}
"+="        {return ADD_ASSIGN; }
"-="        { return SUB_ASSIGN; }
"*="        { return MUL_ASSIGN;}
"/="        { return   QUO_ASSIGN; }
"%="        { return REM_ASSIGN; }
    /*assignments*/
    /*--------------------------------------------------------------------------------------------------------*/
"+"         { return '+'; }
"-"         { return '-'; }
"*"         { return '*'; }
"/"         {return '/';}
"%"        {return '%';}
    /*--------------------------------------------------------------------------------------------------------*/
    /*uniry operators*/
"++"            {return INC;}  
"--"            { return DEC; }
    /*uniry operators*/
    /*--------------------------------------------------------------------------------------------------------*/
    /*relational operators*/
    ">"      { return '>'; }
    "<"      { return '<';}
    "<="         { return LEQ; }
    ">="         { return GEQ ;}
    "=="         {return EQL ; }
    "!="         { return NEQ;}

    /*relational operators*/
    /*--------------------------------------------------------------------------------------------------------*/
    /*--------------------------------------------------------------------------------------------------------*/
    /*delimeter*/
[;]         { return SEMICOLON; }
","         { return ','; }
"("     { return '(' ;}
")"     {return ')' ;}
"{"     { return '{';}
"}"     { return '}' ;}
"["     {return '[';}
"]"     {return ']';}
    /*delimeter*/
    /*--------------------------------------------------------------------------------------------------------*/
    /*--------------------------------------------------------------------------------------------------------*/
    /*reserved words*/
"int"   { return INT; }
"float" { return FLOAT; }
"string"    {return STRING;}
"bool"  { return BOOL;}
"true"  { return TRUE;}
"false" {return FALSE; }
"continue"  { printf("%-8s \t %s\n", yytext, "CONTINUE"); }
"break" { printf("%-8s \t %s\n", yytext, "BREAK"); }
"void"  { printf("%-8s \t %s\n", yytext, "VOID"); }
"return"    { printf("%-8s \t %s\n", yytext, "RETURN"); }

"while" { return WHILE; }
"for"       {return FOR;}
"if"        { return IF;}
"else"      { return ELSE; }
"print"     { return PRINT ;}

    /*reserved words*/
    /*--------------------------------------------------------------------------------------------------------*/

{inumber}   { yylval.i_val = atoi(yytext);
                return INT_LIT;
            }
{fnumber}       { yylval.f_val = atof(yytext);
    return FLOAT_LIT;
     }

{id}        { yylval.s_val = strdup(yytext);
                return IDENT;
            }


<<EOF>>     { static int once = 0;
                
                if (once++) {
                    dump_symbol();
                 
                    yyterminate();

                }
            }
[\n]       {;}
[ \t]+      {;}
.           {;}
%%
/*  C Code section */
int yywrap(void)
{
    return 1;
}